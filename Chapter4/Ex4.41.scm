(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (multiple-dwelling)
  (define (iter baker cooper fletcher miller smith)
    (cond ((= smith 6) (iter baker cooper fletcher (+ miller 1) 1))
          ((= miller 6) (iter baker cooper (+ fletcher 1) 1 1))
          ((= fletcher 6) (iter baker (+ cooper 1) 1 1 1))
          ((= cooper 6) (iter (+ baker 1) 1 1 1 1))
          ((= baker 6) (display "No result"))
          ((= baker 5) (iter baker cooper fletcher miller (+ smith 1)))
          ((= cooper 1) (iter baker cooper fletcher miller (+ smith 1)))
          ((= fletcher 5) (iter baker cooper fletcher miller (+ smith 1)))
          ((= fletcher 1) (iter baker cooper fletcher miller (+ smith 1)))
          ((<= miller cooper) (iter baker cooper fletcher miller (+ smith 1)))
          ((= (abs (- smith fletcher)) 1) (iter baker cooper fletcher miller (+ smith 1)))
          ((= (abs (- fletcher cooper)) 1) (iter baker cooper fletcher miller (+ smith 1)))
          ((not (distinct? (list baker cooper fletcher miller smith)))
                (iter baker cooper fletcher miller (+ smith 1)))
          (else (list (list 'baker baker)
                      (list 'cooper cooper)
                      (list 'fletcher fletcher)
                      (list 'miller miller)
                      (list 'smith smith)))
          ))
    (iter 1 1 1 1 1)
    )
          
(multiple-dwelling)

