(define (simpson f a b n)
    (define (func i)
        (f (+ a (* (/ (- b a) n) i))))
    (define (iter i)
        (if (= i n) (func i)
            (+ (* (if (even? i) 2 4) (func i)) (iter (+ i 1)))
        ))
    (* (/ (- b a) n 3) (+ (f 0) (iter 1))) 
)

; Alternatively
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (simpson f a b n)
  (define h (/ (- b a) n))
  (define (y k)
    (f (+ a (* k h))))
  (define (term k)
    (cond ((= k 0) (y 0)) 
          ((= k n) (y k))
          ((even? k) (* 2 (y k)))
          (else (* 4 (y k)))
          ))
  (define (next k) (+ k 1))
   (* (/ h 3) (sum term 0 next n))
  )

